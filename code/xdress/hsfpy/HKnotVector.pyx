################################################
#                 WARNING!                     #
# This file has been auto-generated by xdress. #
# Do not modify!!!                             #
#                                              #
#                                              #
#                    Come on, guys. I mean it! #
################################################
"""
"""
cimport numpy as np
cimport stlcontainers
cimport xdress_extra_types
from libc.stdlib cimport free
from libcpp.vector cimport vector as cpp_vector

import numpy as np
import stlcontainers

np.import_array()



cdef class HKnotVector:
    """no docstring for HKnotVector, please file a bug report!"""



    # constuctors
    def __cinit__(self, *args, **kwargs):
        self._inst = NULL
        self._free_inst = True

        # cached property defaults


    def _hknotvector_hknotvector_0(self):
        """HKnotVector(self)
        """
        self._inst = new cpp_HKnotVector.HKnotVector()
    
    
    def _hknotvector_hknotvector_1(self, degree, knots):
        """HKnotVector(self, degree, knots)
        """
        cdef cpp_vector[double] knots_proxy
        cdef int iknots
        cdef int knots_size
        cdef double * knots_data
        # knots is a ((('vector', 'float64', 0), 'const'), '&')
        knots_size = len(knots)
        if isinstance(knots, np.ndarray) and (<np.ndarray> knots).descr.type_num == stlcontainers.xd_vector_double.num:
            knots_data = <double *> np.PyArray_DATA(<np.ndarray> knots)
            knots_proxy = cpp_vector[double](<size_t> knots_size)
            for iknots in range(knots_size):
                knots_proxy[iknots] = knots_data[iknots]
        else:
            knots_proxy = cpp_vector[double](<size_t> knots_size)
            for iknots in range(knots_size):
                knots_proxy[iknots] = <double> knots[iknots]
        self._inst = new cpp_HKnotVector.HKnotVector(<xdress_extra_types.uint32> long(degree), knots_proxy)
    
    
    _hknotvector_hknotvector_0_argtypes = frozenset()
    _hknotvector_hknotvector_1_argtypes = frozenset(((0, int), (1, np.ndarray), ("degree", int), ("knots", np.ndarray)))
    
    def __init__(self, *args, **kwargs):
        """HKnotVector(self, degree, knots)
        """
        types = set([(i, type(a)) for i, a in enumerate(args)])
        types.update([(k, type(v)) for k, v in kwargs.items()])
        # vtable-like dispatch for exactly matching types
        if types <= self._hknotvector_hknotvector_0_argtypes:
            self._hknotvector_hknotvector_0(*args, **kwargs)
            return
        if types <= self._hknotvector_hknotvector_1_argtypes:
            self._hknotvector_hknotvector_1(*args, **kwargs)
            return
        # duck-typed dispatch based on whatever works!
        try:
            self._hknotvector_hknotvector_0(*args, **kwargs)
            return
        except (RuntimeError, TypeError, NameError):
            pass
        try:
            self._hknotvector_hknotvector_1(*args, **kwargs)
            return
        except (RuntimeError, TypeError, NameError):
            pass
        raise RuntimeError('method __init__() could not be dispatched')
    
    def __dealloc__(self):
        if self._free_inst:
            free(self._inst)

    # attributes

    # methods
    def degree(self):
        """degree(self)
        no docstring for degree, please file a bug report!"""
        cdef xdress_extra_types.uint32 rtnval
        rtnval = (<cpp_HKnotVector.HKnotVector *> self._inst).degree()
        return int(rtnval)
    
    
    def isEven(self):
        """isEven(self)
        no docstring for isEven, please file a bug report!"""
        cdef bint rtnval
        rtnval = (<cpp_HKnotVector.HKnotVector *> self._inst).isEven()
        return bool(rtnval)
    
    
    def isOdd(self):
        """isOdd(self)
        no docstring for isOdd, please file a bug report!"""
        cdef bint rtnval
        rtnval = (<cpp_HKnotVector.HKnotVector *> self._inst).isOdd()
        return bool(rtnval)
    
    
    

    pass







