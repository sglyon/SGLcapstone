"""Tests the part of stlconverters that is accessible from Python."""
###################
###  WARNING!!! ###
###################
# This file has been autogenerated
from __future__ import print_function
from unittest import TestCase
import nose

from nose.tools import assert_equal, assert_not_equal, assert_raises, raises, \
    assert_almost_equal, assert_true, assert_false, assert_in

from numpy.testing import assert_array_equal, assert_array_almost_equal

import os
import numpy  as np
from collections import Container, Mapping

from hsfpypy import stlcontainers


# SetUInt
def test_set_uint():
    s = stlcontainers.SetUInt()
    s.add(1)
    assert_true(1 in s)
    assert_true(4294967295 not in s)

    s = stlcontainers.SetUInt([1, 65, 4294967295])
    assert_true(65 in s)
    assert_true(42 not in s)



# VectorDouble
def test_vector_double():
    a = np.array([1.0, 42.42, -65.5555, 18], dtype=stlcontainers.xd_double)
    #for x, y in zip(a, np.array([1.0, 42.42, -65.5555, 18], dtype=stlcontainers.xd_double)):
    #    assert_equal(x, y)
    a[:] = [18, -65.5555, 42.42, 1.0]
    #for x, y in zip(a, np.array([18, -65.5555, 42.42, 1.0], dtype=stlcontainers.xd_double)):
    #    assert_equal(x, y)
    a = np.array([1.0, -65.5555, 1.0, -65.5555] + [42.42, 18, 42.42, 18], dtype=stlcontainers.xd_double)
    #for x, y in zip(a, np.array([1.0, -65.5555, 1.0, -65.5555] + [42.42, 18, 42.42, 18], dtype=stlcontainers.xd_double)):
    #    assert_equal(x, y)
    b =  np.array(([1.0, -65.5555, 1.0, -65.5555] + [42.42, 18, 42.42, 18])[::2], dtype=stlcontainers.xd_double)
    #for x, y in zip(a[::2], b):
    #    assert_equal(x, y)
    a[:2] = b[-2:]
    print(a)



# VectorInt
def test_vector_int():
    a = np.array([1, 42, -65, 18], dtype=stlcontainers.xd_int)
    #for x, y in zip(a, np.array([1, 42, -65, 18], dtype=stlcontainers.xd_int)):
    #    assert_equal(x, y)
    a[:] = [18, -65, 42, 1]
    #for x, y in zip(a, np.array([18, -65, 42, 1], dtype=stlcontainers.xd_int)):
    #    assert_equal(x, y)
    a = np.array([1, -65, 1, -65] + [42, 18, 42, 18], dtype=stlcontainers.xd_int)
    #for x, y in zip(a, np.array([1, -65, 1, -65] + [42, 18, 42, 18], dtype=stlcontainers.xd_int)):
    #    assert_equal(x, y)
    b =  np.array(([1, -65, 1, -65] + [42, 18, 42, 18])[::2], dtype=stlcontainers.xd_int)
    #for x, y in zip(a[::2], b):
    #    assert_equal(x, y)
    a[:2] = b[-2:]
    print(a)







if __name__ == '__main__':
    nose.run()
